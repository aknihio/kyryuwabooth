const SlashCommand = require("../../lib/SlashCommand");
const { MessageActionRow, MessageButton, MessageEmbed } = require("discord.js");
const api = require('lyrics-searcher-musixmatch').default

const command = new SlashCommand()
	.setName("lyrics")
	.setDescription("—Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏")
	.addStringOption((option) =>
		option
			.setName("song")
			.setDescription("–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏")
			.setRequired(false),
	)
	.setRun(async (client, interaction, options) => {
		await interaction.reply({
			embeds: [
				new MessageEmbed()
					.setColor(client.config.embedColor)
					.setDescription("üîé **–ü–æ–∏—Å–∫...**"),
			],
		});
		
		let player;
		if (client.manager) {
			player = client.manager.players.get(interaction.guild.id);
		} else {
			return interaction.reply({
				embeds: [
					new MessageEmbed()
						.setColor("RED")
						.setDescription("Lavalink node –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω"),
				],
			});
		}
		
		const args = interaction.options.getString("song");
		if (!args && !player) {
			return interaction.editReply({
				embeds: [
					new MessageEmbed()
						.setColor("RED")
						.setDescription("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç"),
				],
			});
		}
		
		let search = args? args : player.queue.current.title;
        api(search).then((lyrics) => {
		let text = lyrics.lyrics
		const button = new MessageActionRow()
			.addComponents(
				new MessageButton()
					.setCustomId('tipsbutton')
					.setLabel('–¢–∏–ø—Å')
					.setEmoji(`üìå`)
					.setStyle('SECONDARY'),
				new MessageButton()
					.setLabel('–ò—Å—Ç–æ—á–Ω–∏–∫')
					.setURL(lyrics.info.track.shareUrl)
					.setStyle('LINK'),
			);
		
		let lyricsEmbed = new MessageEmbed()
					.setColor(client.config.embedColor)
					.setTitle(`${ lyrics.info.track.name }`)
					.setURL(lyrics.info.track.shareUrl)
					.setThumbnail(lyrics.info.track.albumCoverart350x350)
                    .setFooter({ text: '–¢–µ–∫—Å—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω MusixMatch.', iconURL: 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e3/Musixmatch_logo_icon_only.svg/480px-Musixmatch_logo_icon_only.svg.png' })
					.setDescription(text);
		
		if (text.length > 4096) {
				text = text.substring(0, 4050) + "\n\n[...]";
				lyricsEmbed
					.setDescription(text + `\n–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.`)
			}

		return interaction.editReply({ 
				embeds: [lyricsEmbed],
				components: [button],
			
			});
		
		}) 
		.catch((err) => {	
		if (err.message == `–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!`) {
			const button = new MessageActionRow()
			.addComponents(
				new MessageButton()
				    .setEmoji(`üìå`)
				    .setCustomId('tipsbutton')
					.setLabel('–¢–∏–ø—Å')
					.setStyle('SECONDARY'),
			);	

		return interaction.editReply({
			embeds: [
				new MessageEmbed()
					.setColor("RED")
					.setDescription(
						`‚ùå | –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ${ search }!\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.`,
					),
			],
			components: [button],
		});
	} else {
		return interaction.editReply({
			embeds: [
				new MessageEmbed()
					.setColor("RED")
					.setDescription(
						`‚ùå | –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.`,
					),
			],
		});
	};
});

const collector = interaction.channel.createMessageComponentCollector({time: 1000 * 3600 });

collector.on('collect', async i => {
	if (i.customId === 'tipsbutton') {
		await i.deferUpdate();
		await i.followUp({ 			
		embeds: [
			new MessageEmbed()
			    .setTitle(`–ü–æ–¥—Å–∫–∞–∑–∫–∏`)
			    .setColor(client.config.embedColor)
				.setDescription(
					`–ü–û–¥—Å–∫–∞–∑–∫–∞: –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç \n\n1. –î–æ–±–∞–≤—å—Ç–µ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–µ—Å–Ω–∏.\n2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ —Å–∞–º–∏.\n3. –ò–∑–±–µ–≥–∞–π—Ç–µ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –∫—Ä–æ–º–µ –ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –∫—Ä–æ–º–µ —Ç–µ—Ö –ø–µ—Å–µ–Ω —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥—Ä—É–≥–æ–π —è–∑—ã–∫.`,
				),
		], ephemeral: true, components: [] });
	    };
    });
});

module.exports = command;
